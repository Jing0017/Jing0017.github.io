<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于GitHub Pages搭建Hexo博客]]></title>
    <url>%2F2019%2F07%2F17%2F%E5%9F%BA%E4%BA%8EGitHub-Pages-%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[介绍Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 准备工作安装Git版本控制软件访问git官方下载页面下载对应终端的git安装包，笔者使用的是macbook,所以下载Mac OS X 版本。下载页面如下图所示，点击下载对应终端的git安装包即可。 安装完毕在命令终端输入git，出现如下提示表示git安装成功。window用户可以使用git bash。 安装nodejs访问nodejs官网下载lts版本的安装包，笔者访问时的版本为10.16.0，直接点击下载安装即可。 安装完毕，在命令行输入node -v和npm -v出现版本信息，表示node安装成功。 创建github仓库创建repository访问github。如果没有账号，请先注册。注册完毕，进入个人中心页面，点击左侧边栏的new按钮，进入创建仓库界面。输入仓库名称，yourname.github.io。点击Create repository完成仓库创建。 注意： yourname要和你的github用户名一致，笔者这里yourname为Jing0017。 仓库后缀必需为.github.io结尾。 请务必遵循这俩个条件，否则后续访问会出现404错误。 设置repository的Github Pages完成创建后，点击Settings，滚动下拉至Github Pages配置模块，配置Source，下拉框选择master分支。如果master branch为灰色，请先按照CodeTab页的教程生成README.md文件，然后在回来设置Github Pages。 生成ssh秘钥为方便后续访问，选择ssh方式克隆仓库，免去每次提交时的用户和密码验证。 在终端（Terminal）输入： 1$ ssh-keygen -t rsa -C "Github的注册邮箱地址" 遇到提示请按Enter，等待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub，用文本编辑器打开id_rsa.pub复制里面内容。访问这里，点击 New SSH key，将复制的内容粘贴至文本框中。最后点击Add SSH key。 安装配置hexo做完上述准备工作，终于迎来了我们的主角hexo。 具体安装步骤，可以参考官方文档。不想移步的请继续往下看。 下载安装hexo选定博客在本地存放的路径1$ cd &lt;your path&gt; 强调：强烈建议不要 选择需要管理员权限才能创建文件（夹）的文件夹。 安装hexo-cli1$ npm install -g hexo-cli 等待安装完毕，在命令行输入 1$ hexo 若出现下图，说明hexo安装成功： 初始化博客123$ hexo init &lt;folder&gt; // 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字$ cd &lt;folder&gt;$ npm install // 根据package.json的dependencies配置安装所有的依赖包 配置_config.yml初始化博客之后，我们可以看到项目的基本目录结构： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml里修改博客的基础配置。可以参考官方文档。下面我们具体看一下_config.yml文件全貌。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: # The title of your websitesubtitle: # The subtitle of your websitedescription: # The description of your websiteauthor: # Your namelanguage: # The language of your websitetimezone: # URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com/childroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 完善网站信息(Site)12345678# Sitetitle: 禅心小筑subtitle: 随遇而安 description: 菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。keywords: 技术 生活 修行 求道。author: 随风language: zh-CNtimezone: Asia/Shanghai language和timezone的配置，详细可参考语言规范和时区规范。 注意：language字段配置的zh-CN 必需和相关主题文件夹下 /themes/next/languages里面的国际化文件相匹配，否则配置将不生效，显示默认英文配置。 配置主题hexo的默认主题是 landscape，参看这里可以选择自己心仪的主题，笔者这里选择的是next，安装教程可参看这里。简要步骤如下： 12$ cd &lt;folder&gt; $ git clone https://github.com/theme-next/hexo-theme-next themes/next 然后在_config.yml中配置： 1theme: next 配置部署（Deploy）1234deploy: type: git repo: git@github.com:Jing0017/Jing0017.github.io.git branch: master 此处repo配置为准备工作中我们创建的仓库。选择使用ssh方式克隆。branch选择master分支，和github page的设置相对应。 至此我们完成了hexo的安装与配置。 发表第一篇文章建立分类命令终端输入： 1$ hexo new page "categories" 在/source/categories目录下找到index.md文件打开写入如下内容： 12345---title: 文章分类date: 2019-07-15 11:49:33type: "categories"--- 建立标签同理 1$ hexo new page "tags" 在/source/tags目录下找到index.md文件打开写入如下内容： 12345---title: 标签date: 2019-07-15 11:49:20type: "tags"--- 新建一篇文章新建文章并完成写作1$ hexo new "静夜思" 在/source/_post目录下找到 静夜思.md文件打开写入如下内容： 详细解释如下： 12345678title: 静夜思 //文章的标题date: 2019-07-17 16:54:51categories: 唐诗 //注意:之后有空格，将文章划分到唐诗的分类中tags: 李白 //给文章打上李白的标签床前明月光，疑是地上霜。举头望明月，低头思故乡。 本地访问博客markdown生成html1$ hexo generate //简写 hexo g 此时发现文件目录多了public文件夹，此文件夹下是根据/source/_post/目录下的所有markdown文件生成的html，css，js等静态文件。 启动本地服务1$ hexo server // 简写 hexo s 根据提示访问http://localhost:4000。 发现主页新增了一篇静夜思的文章，切分类为唐诗，标签为李白。 笔者这里已经对主题进行了优化，所以和next的默认样式出入较大。 通过Github Page 访问博客执行hexo 部署命令，将生成的静态文件推送至我们的github仓库(yourname.github.io)。 1$ hexo deploy //简写 hexo d 然后直接访问https://yourname.github.io即可。 通过域名访问hexo博客购置域名从各大域名提供商购置个人域名，笔者之前在阿里万网购置过域名，此处省略域名购置流程。可以自行百度。 Github Pages 配置域名 在仓库的Settingstab页中找到GitHub Pages 将Custom domain 设置为自己的域名。此时可以看到Codetab 页中会生成一个CNAME文件，保存着我们的域名信息。 域名配置DNS解析新增俩条域名解析 记录类型为CNAME，主机记录分别为@和www,记录值填yourname.github.io。等待域名解析生效。 域名解析生效后，直接访问http://你的域名即可访问hexo博客。效果如下： 注意： CNAME文件在下次 hexo deploy的时候就消失了，需要重新创建，这样就很繁琐。 网上推荐的解决方法我比较推荐新增hexo-generator-cname插件实现永久保留。 具体操作如下： 在博客根目录下（source 同级目录） 1$ npm install hexo-generator-cname --save //下载hexo-generator-cname库并将依赖写入package.json 在_config.yml 找到Plugins的注释，在其下方增加: 12Plugins:- hexo-generator-cname :smile:感谢你看到了最后，至此我们完成了hexo博客的搭建。对主题优化有兴趣的读者可以留意后续的文章。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown For Typora]]></title>
    <url>%2F2019%2F07%2F16%2FMarkdown-For-Typora%2F</url>
    <content type="text"><![CDATA[OverviewMarkdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown. Block ElementsParagraph and line breaksA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph. Press Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert &lt;br/&gt;. HeadersHeaders use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example: 12345# This is an H1## This is an H2###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header. BlockquotesMarkdown uses email-style &gt; characters for block quoting. They are presented as: 1234567&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’. ListsInput * list item 1 will create an unordered list - the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list - their markdown source code is as follows: 123456789## un-ordered list* Red* Green* Blue## ordered list1. Red2. Green3. Blue Task ListTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: 12345- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed You can change the complete/incomplete state by clicking on the checkbox before the item. (Fenced) Code BlocksTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported. Using fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we’ll run it through syntax highlighting: 1234567891011121314Here's an example:```function test() &#123; console.log("notice the blank line before this function?");&#125;```syntax highlighting:```rubyrequire 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html``` Math BlocksYou can render LaTeX mathematical expressions using MathJax. To add a mathematical expression, input $$ and press the ‘Return’ key. This will trigger an input field which accepts Tex/LaTex source. For example:$$\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \\end{vmatrix}$$In the markdown source file, the math block is a LaTeX expression wrapped by a pair of ‘$$’ marks: 1234567$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = \begin&#123;vmatrix&#125;\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$ You can find more details here. TablesInput | First Header | Second Header | and press the return key. This will create a table with two columns. After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows. The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora. In markdown source code, they look like: 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table. Finally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned: 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column. Footnotes123You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. Hover over the ‘footnote’ superscript to see content of the footnote. Horizontal RulesInputting *** or --- on a blank line and pressing return will draw a horizontal line. YAML Front MatterTypora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora. Table of Contents (TOC)Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document. Span ElementsSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element. LinksMarkdown supports two styles of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: 1This is [an example](http://example.com/) inline link. will produce: This is an example inline link. (&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot;&gt;) Internal LinksYou can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. Reference LinksReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: 12345This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label on a line by itself like this:[id]: http://example.com/ "Optional Title Here" In Typora, they will be rendered like so: This is an example reference-style link. The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write: 1234[Google][]And then define the link:[Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser. URLsTypora allows you to insert URLs as links, wrapped by &lt;brackets&gt;. &lt;i@typora.io&gt; becomes &#105;&#x40;&#x74;&#x79;&#x70;&#x6f;&#x72;&#97;&#46;&#x69;&#x6f;. Typora will also automatically link standard URLs. e.g: www.google.com. ImagesImages have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this: 123![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg "Optional title") You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing. If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora. You can find more details here. EmphasisMarkdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML &lt;em&gt; tag. E.g: 123*single asterisks*_single underscores_ output: single asterisks single underscores GFM will ignore underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: 1\*this text is surrounded by literal asterisks\* Typora recommends using the * symbol. StrongA double * or _ will cause its enclosed contents to be wrapped with an HTML &lt;strong&gt; tag, e.g: 123**double asterisks**__double underscores__ output: double asterisks double underscores Typora recommends using the ** symbol. CodeTo indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: 1Use the `printf()` function. will produce: Use the printf() function. StrikethroughGFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. UnderlinesUnderline is powered by raw HTML. &lt;u&gt;Underline&lt;/u&gt; becomes Underline. Emoji 😄Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -&gt; Emoji &amp; Symbols in the menu bar (macOS). Inline MathTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\lim_{x \to \infty} \exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command. You can find more details here. SubscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\ text~/ SuperscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^. HighlightTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==. HTMLYou can use HTML to style content what pure Markdown does not support. For example, use &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; to add text with red color. Embed ContentsSome websites provide iframe-based embed code which you can also paste into Typora. For example: 1&lt;iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;&lt;/iframe&gt; VideoYou can use the &lt;video&gt; HTML tag to embed videos. For example: 1&lt;video src="xxx.mp4" /&gt; Other HTML SupportYou can find more details here.]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客备份]]></title>
    <url>%2F2019%2F07%2F15%2Fhexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[一、将本地hexo博客的仓库初始化为git项目注意：检查一下theme文件夹下的主题。例如如果themes/next，此目录下若有.git文件夹，请删除这个.git文件夹。 12//默认已经在项目根路径下git init //初始化本地仓库 二、配置.gitignore文件新建.gitignore（有则忽略），在文件中输入以下内容 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 三、将本地仓库和xxx.github.io仓库的url配对，推送本地仓库文件至远端的hexo分支123456git add .git commit -m "blog hexo"git branch hexo //新建hexo分支git checkout hexo //切换到hexo分支上git remote add origin git@github.com:xxx/xxx.github.io.git //xxx为github用户名git push origin hexo //push到Github项目的hexo分支上 四、在其他终端获取hexo仓库。1.从github上拉取hexo分支的代码123git clone -b hexo git@github.com:user/user.github.io.git //将Github中hexo分支clone到本地cd user.github.ionpm install 2.写文章并进行备份和部署1234567//进入user.github.io文件夹,应是hexo分支git pull origin hexo //本地和远端的融合hexo new post "new post name" //写新文章git add sourcegit commit -m "xxx"git push origin hexo //备份hexo g &amp;&amp; hexo d]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>备份</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>禅心小筑</title>
  
  <subtitle>随遇而安</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yiminilife.com/"/>
  <updated>2019-12-18T01:50:07.176Z</updated>
  <id>https://yiminilife.com/</id>
  
  <author>
    <name>随风</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot 整合mongodb实现CRUD</title>
    <link href="https://yiminilife.com/posts/634f3968/"/>
    <id>https://yiminilife.com/posts/634f3968/</id>
    <published>2019-11-27T05:43:02.000Z</published>
    <updated>2019-12-18T01:50:07.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h2><p>MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。基于分布式文件存储的数据库。由C++语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个高性能，开源，无模式的文档型数据库，是当前 NoSql 数据库中比较热门的一种。</p><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似 json 的 bjson 格式，因此可以存储比较复杂的数据类型。MongoDB 最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>传统的关系数据库一般由数据库（database）、表（table）、记录（record）三个层次概念组成，MongoDB 是由数据库（database）、集合（collection）、文档对象（document）三个层次组成。MongoDB 对于关系型数据库里的表，但是集合中没有列、行和关系概念，这体现了模式自由的特点。</p><p>MongoDB 中的一条记录就是一个文档，是一个数据结构，由字段和值对组成。MongoDB 文档与 JSON 对象类似。字段的值有可能包括其它文档、数组以及文档数组。MongoDB 支持 OS X、Linux 及 Windows 等操作系统，并提供了 Python，PHP，Ruby，Java及 C++ 语言的驱动程序，社区中也提供了对 Erlang 及 .NET 等平台的驱动程序。</p><p>MongoDB 的适合对大量或者无固定格式的数据进行存储，比如：日志、缓存等。对事物支持较弱，不适用复杂的多文档（多表）的级联查询。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="maven依赖配置"><a href="#maven依赖配置" class="headerlink" title="maven依赖配置"></a>maven依赖配置</h3><p>在pom文件的dependencies节点中增加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application配置"><a href="#application配置" class="headerlink" title="application配置"></a>application配置</h3><p>在项目的application.yml配置文件中加入mongodb服务地址，集群模式配置将地址用逗号隔开即可，举例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongodb</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">mongodb://username:password@ip:port,ip2:port,ip3:port3/databaseName</span></span><br></pre></td></tr></table></figure><h3 id="spring-boot-启动类配置"><a href="#spring-boot-启动类配置" class="headerlink" title="spring boot 启动类配置"></a>spring boot 启动类配置</h3><p>在spring boot项目启动类上增加注解<strong>@EnableMongoRepositories</strong>，basePackages指定需要扫描的包路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>()</span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="string">"com.xxx.xxx.xx.xxxx.repository"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication app = <span class="keyword">new</span> SpringApplication(Application.class);</span><br><span class="line">        app.addListeners(<span class="keyword">new</span> AppStartedListener());</span><br><span class="line">        app.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MongoDB-增删改查"><a href="#MongoDB-增删改查" class="headerlink" title="MongoDB 增删改查"></a>MongoDB 增删改查</h2><h3 id="直接继承MongoRepository实现增删改查"><a href="#直接继承MongoRepository实现增删改查" class="headerlink" title="直接继承MongoRepository实现增删改查"></a>直接继承MongoRepository实现增删改查</h3><p>首先创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"SysOperateRecord"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysOperateRecord</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作类型:参数管理，仓库管理，子仓管理，库区管理，货位管理，包裹管理，波次管理，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operateCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作类型名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operateName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作的记录ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Indexed</span></span><br><span class="line">    <span class="keyword">private</span> Integer operateId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operateContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否删除标记0 未删除 1 已删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date lastUpdateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operateBefore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><p>@Document：标识该类为mongodb文档类，设置的collection名会直接映射到mongodb中</p><p>@id：标识字段为主键id</p><p>@Indexed：以该字段创建索引</p><p>更多注解请参考<a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.2.RELEASE/reference/html/#mapping-usage-annotations" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a></p><p>新建xxxRepository类继承MongoRepository：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysOperateRecordRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">SysOperateRecord</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MongoRepository接口中提供了一系列的增删改查接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MongoRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.CrudRepository#save(java.lang.Iterable)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">&lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; entites)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.CrudRepository#findAll()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.PagingAndSortingRepository#findAll(org.springframework.data.domain.Sort)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the given entity. Assumes the instance to be new to be able to apply insertion optimizations. Use</span></span><br><span class="line"><span class="comment"> * the returned instance for further operations as the save operation might have changed the entity instance</span></span><br><span class="line"><span class="comment"> * completely. Prefer using &#123;<span class="doctag">@link</span> #save(Object)&#125; instead to avoid the usage of store-specific API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the saved entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;S extends T&gt; <span class="function">S <span class="title">insert</span><span class="params">(S entity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the given entities. Assumes the given entities to have not been persisted yet and thus will optimize the</span></span><br><span class="line"><span class="comment"> * insert over a call to &#123;<span class="doctag">@link</span> #save(Iterable)&#125;. Prefer using &#123;<span class="doctag">@link</span> #save(Iterable)&#125; to avoid the usage of store</span></span><br><span class="line"><span class="comment"> * specific API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entities must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the saved entities</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">insert</span><span class="params">(Iterable&lt;S&gt; entities)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.query.QueryByExampleExecutor#findAll(org.springframework.data.domain.Example)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">&lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.data.repository.query.QueryByExampleExecutor#findAll(org.springframework.data.domain.Example, org.springframework.data.domain.Sort)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">&lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example, Sort sort)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用save方法，可以实现批量新增和修改记录。当记录存在时会自动更新记录，不存在则新增记录。</p><p>通过调用insert方法，可以实现新增或者批量新增记录。</p><p>通过调用findAll方法，可以实现查询记录。</p><p>同时，MongoRepository还继承了PagingAndSortingRepository和QueryByExampleExecutor，分别提供了分页查询方法和基于Example查询的方法。</p><p>使用举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用insert方法新增记录</span></span><br><span class="line">SysOperateRecord sysOperateRecord = <span class="keyword">new</span> SysOperateRecord();</span><br><span class="line">sysOperateRecord.setOperateCode(operateType.getCode());</span><br><span class="line">sysOperateRecord.setOperateName(operateType.getDescription());</span><br><span class="line">sysOperateRecord.setOperateId(i);</span><br><span class="line">sysOperateRecord.setOperateContent(operateType.getDescription());</span><br><span class="line">sysOperateRecord.setOperateUser(<span class="string">"root"</span>);</span><br><span class="line">sysOperateRecord.setRemark(operateType.getDescription());</span><br><span class="line">sysOperateRecordRepository.insert(sysOperateRecords); <span class="comment">//insert支持传入list批量新增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用save方法新增记录</span></span><br><span class="line">SysOperateRecord sysOperateRecord = <span class="keyword">new</span> SysOperateRecord();</span><br><span class="line">sysOperateRecord.setOperateCode(operateType.getCode());</span><br><span class="line">sysOperateRecord.setOperateName(operateType.getDescription());</span><br><span class="line">sysOperateRecord.setOperateId(i);</span><br><span class="line">sysOperateRecord.setOperateContent(operateType.getDescription());</span><br><span class="line">sysOperateRecord.setOperateUser(<span class="string">"root"</span>);</span><br><span class="line">sysOperateRecord.setRemark(operateType.getDescription());</span><br><span class="line">sysOperateRecordRepository.save(sysOperateRecords); <span class="comment">//save支持传入list批量新增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用save方法更新记录</span></span><br><span class="line">SysOperateRecord sysOperateRecord = <span class="keyword">new</span> SysOperateRecord();</span><br><span class="line">sysOperateRecord.setId(<span class="string">"xxxxx"</span>); <span class="comment">//id在mongodb collection中已经存在</span></span><br><span class="line">sysOperateRecord.setOperateCode(operateType.getCode());</span><br><span class="line">sysOperateRecord.setOperateName(operateType.getDescription());</span><br><span class="line">sysOperateRecord.setOperateId(i);</span><br><span class="line">sysOperateRecord.setOperateContent(operateType.getDescription());</span><br><span class="line">sysOperateRecord.setOperateUser(<span class="string">"root"</span>);</span><br><span class="line">sysOperateRecord.setRemark(operateType.getDescription());</span><br><span class="line">sysOperateRecordRepository.save(sysOperateRecords); <span class="comment">//save支持传入list批量更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用delete方法删除记录</span></span><br><span class="line">sysOperateRecordRepository.delete(<span class="string">"sss"</span>);<span class="comment">//删除id为sss的记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用findAll查询记录</span></span><br><span class="line">SysOperateRecord sysOperateRecord = <span class="keyword">new</span> SysOperateRecord();</span><br><span class="line">sysOperateRecord.setOperateCode(<span class="string">"AAA"</span>);</span><br><span class="line">sysOperateRecord.setOperateId(<span class="number">1</span>);</span><br><span class="line">sysOperateRecordRepository.findAll(Example.of(sysOperateRecord), <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"createTime"</span>)); <span class="comment">//查询OperateCode为AAA且OperateId为1的记录，根据createTime倒序排序</span></span><br></pre></td></tr></table></figure><p>此外在xxxRepository中，我们可以自定义方法进行查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据操作id查询记录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> operateId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">   <span class="function">List&lt;SysOperateRecord&gt; <span class="title">findByOperateId</span><span class="params">(Integer operateId)</span></span>;</span><br></pre></td></tr></table></figure><p>更多用法请参考<a href="https://docs.spring.io/spring-data/jpa/docs/2.2.2.RELEASE/reference/html/#reference" rel="external nofollow noopener noreferrer" target="_blank">spring data jpa</a> </p><h3 id="使用-Query注解"><a href="#使用-Query注解" class="headerlink" title="使用@Query注解"></a>使用@Query注解</h3><p>在上一节中，我们直接继承MongoRepository，使用框架内置的查询方法可以进行一些简单查询。奈何在实际使用时，我们会使用像IN这种操作，如果查询限制条件非常多的话，可能我们会自定义如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SysOperateRecord&gt; <span class="title">findByOperateCodeAndOperateBeforeAndOperateContentAndOperateIdIn</span><span class="params">(String operateCode,String operateBefore, String operateContent, List&lt;Integer&gt; operateIds)</span></span>;</span><br></pre></td></tr></table></figure><p>方法名会变的特别长，很难看也难以维护。</p><p>此时我们可以使用<strong>@Query</strong>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"&#123;operateCode: ?0, operateBefore:?1,operateContent:?2,operateId:&#123;$in: ?3&#125;, isDelete:false&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;SysOperateRecord&gt; <span class="title">find</span><span class="params">(String operateCode,String operateBefore, String operateContent, List&lt;Integer&gt; operateIds)</span></span>;</span><br></pre></td></tr></table></figure><p>注解value字段直接写入json形式的字符串，占位符？0表方法第一个参数，以此类推。</p><h3 id="使用Querydsl"><a href="#使用Querydsl" class="headerlink" title="使用Querydsl"></a>使用Querydsl</h3><p>上节我们使用<strong>@Query</strong>注解解决了方法名过长的问题，有心的小伙伴会发现，使用注解还是会存在俩个问题：</p><ol><li>我们必须对manogo原生查询非常熟悉才能很快写出json字符串</li><li>当查询的条件很多时，方法参数也会变的很多，易读性差，使用性也差</li></ol><p>那么有没有更优雅的方式来进行复杂条件查询呢，of course。</p><h4 id="Querydsl简介"><a href="#Querydsl简介" class="headerlink" title="Querydsl简介"></a>Querydsl简介</h4><p><a href="http://www.querydsl.com/" rel="external nofollow noopener noreferrer" target="_blank">官方</a>介绍如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Querydsl is a framework which enables the construction of type-safe SQL-like queries for multiple backends including JPA, MongoDB and SQL in Java.</span><br><span class="line"></span><br><span class="line">Instead of writing queries as inline strings or externalizing them into XML files they are constructed via a fluent API.</span><br></pre></td></tr></table></figure><p>大意就是使用这个类库，可以让我像写sql一样的去写java代码。免去了我们手动在字符串中或者xml中写原生sql的麻烦。听起来好像还不错，那么如何在spring项目中使用该类库呢？</p><p>很简单，sping data对Querydsl进行了集成。咱们需要额外引入的是Querydsl对mongodb提供支持的类库。</p><h4 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h4><h5 id="1-在pom文件的依赖中添加："><a href="#1-在pom文件的依赖中添加：" class="headerlink" title="1. 在pom文件的依赖中添加："></a>1. 在pom文件的依赖中添加：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-添加apt插件"><a href="#2-添加apt插件" class="headerlink" title="2. 添加apt插件"></a>2. 添加apt插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apt-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-apt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;querydsl.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>process<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/generated-sources/queries<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">processor</span>&gt;</span>org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor<span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">logOnlyOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">logOnlyOnError</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="执行mave编译命令"><a href="#执行mave编译命令" class="headerlink" title="执行mave编译命令"></a>执行mave编译命令</h4><p>执行maven命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean compile</span><br></pre></td></tr></table></figure><p>执行完毕后，在target/generated-sources/queries包下会生成<strong>Q</strong>开头的实体类。本文中即为<strong>QSysOperateRecord</strong>，该类是由maven插件自动生成的。插件会为带@Document注解的类自动生成QXXX。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QSysOperateRecord is a Querydsl query type for SysOperateRecord</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Generated</span>(<span class="string">"com.querydsl.codegen.EntitySerializer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QSysOperateRecord</span> <span class="keyword">extends</span> <span class="title">EntityPathBase</span>&lt;<span class="title">SysOperateRecord</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">643412538L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QSysOperateRecord sysOperateRecord = <span class="keyword">new</span> QSysOperateRecord(<span class="string">"sysOperateRecord"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> DateTimePath&lt;java.util.Date&gt; createTime = createDateTime(<span class="string">"createTime"</span>, java.util.Date.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath id = createString(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> BooleanPath isDelete = createBoolean(<span class="string">"isDelete"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> DateTimePath&lt;java.util.Date&gt; lastUpdateTime = createDateTime(<span class="string">"lastUpdateTime"</span>, java.util.Date.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath operateBefore = createString(<span class="string">"operateBefore"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath operateCode = createString(<span class="string">"operateCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath operateContent = createString(<span class="string">"operateContent"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> NumberPath&lt;Integer&gt; operateId = createNumber(<span class="string">"operateId"</span>, Integer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath operateName = createString(<span class="string">"operateName"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath operateUser = createString(<span class="string">"operateUser"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath remark = createString(<span class="string">"remark"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QSysOperateRecord</span><span class="params">(String variable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(SysOperateRecord.class, forVariable(variable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QSysOperateRecord</span><span class="params">(Path&lt;? extends SysOperateRecord&gt; path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(path.getType(), path.getMetadata());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QSysOperateRecord</span><span class="params">(PathMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(SysOperateRecord.class, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><h5 id="1-xxxRepository继承QueryDslPredicateExecutor"><a href="#1-xxxRepository继承QueryDslPredicateExecutor" class="headerlink" title="1. xxxRepository继承QueryDslPredicateExecutor"></a>1. xxxRepository继承QueryDslPredicateExecutor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysOperateRecordRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">SysOperateRecord</span>, <span class="title">String</span>&gt;, <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">SysOperateRecord</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>QueryDslPredicateExecutor中提供了对Querydsl的支持。</p><h5 id="2-使用举例"><a href="#2-使用举例" class="headerlink" title="2. 使用举例"></a>2. 使用举例</h5><p>查询举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SysOperateRecord&gt; <span class="title">queryBy</span><span class="params">(String operateCode, List&lt;Integer&gt; operateIds)</span> </span>&#123;</span><br><span class="line">    QSysOperateRecord qSysOperateRecord = QSysOperateRecord</span><br><span class="line">        .sysOperateRecord;</span><br><span class="line">    <span class="comment">//通过链式的调用方式，组装查询条件</span></span><br><span class="line">    BooleanExpression condition = qSysOperateRecord.operateCode.eq(operateCode)</span><br><span class="line">        .and(qSysOperateRecord.operateId.in(operateIds))</span><br><span class="line">        .and(qSysOperateRecord.isDelete.eq(<span class="keyword">false</span>));</span><br><span class="line">   <span class="comment">//调用findAll方法，传入查询条件和排序方式，排序方式支持多字段排序</span></span><br><span class="line">    Iterable&lt;SysOperateRecord&gt; records = sysOperateRecordRepository</span><br><span class="line">        .findAll(condition, <span class="keyword">new</span> QSort(qSysOperateRecord.createTime.desc()));</span><br><span class="line">    <span class="keyword">return</span> Lists.newArrayList(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SysOperateRecord&gt; <span class="title">queryPageBy</span><span class="params">(String operateCode, List&lt;Integer&gt; operateIds, PageReq pageReq)</span> </span>&#123;</span><br><span class="line">    QSysOperateRecord qSysOperateRecord = QSysOperateRecord</span><br><span class="line">        .sysOperateRecord;</span><br><span class="line">    BooleanExpression condition = qSysOperateRecord.operateCode.eq(operateCode)</span><br><span class="line">        .and(qSysOperateRecord.operateId.in(operateIds))</span><br><span class="line">        .and(qSysOperateRecord.isDelete.eq(<span class="keyword">false</span>));</span><br><span class="line">    Iterable&lt;SysOperateRecord&gt; records = sysOperateRecordRepository</span><br><span class="line">        .findAll(condition,</span><br><span class="line">                 <span class="keyword">new</span> QPageRequest(</span><br><span class="line">                     pageReq.getPageNum(),</span><br><span class="line">                     pageReq.getPageSize(),</span><br><span class="line">                     <span class="keyword">new</span> QSort(qSysOperateRecord.createTime.desc())));</span><br><span class="line">    <span class="keyword">return</span> Lists.newArrayList(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了spring项目如何集成mongodb，并简要分析了几种查询方式的优缺点。基本结论如下：</p><ul><li>简单查询直接使用repository内置api即可</li><li>复杂查询推荐使用Querydsl</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB-简介&quot;&gt;&lt;a href=&quot;#MongoDB-简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 简介&quot;&gt;&lt;/a&gt;MongoDB 简介&lt;/h2&gt;&lt;p&gt;MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是
      
    
    </summary>
    
      <category term="java" scheme="https://yiminilife.com/categories/java/"/>
    
    
      <category term="spring boot" scheme="https://yiminilife.com/tags/spring-boot/"/>
    
      <category term="mongodb" scheme="https://yiminilife.com/tags/mongodb/"/>
    
      <category term="spring data jpa" scheme="https://yiminilife.com/tags/spring-data-jpa/"/>
    
      <category term="querydsl" scheme="https://yiminilife.com/tags/querydsl/"/>
    
  </entry>
  
  <entry>
    <title>zuul 根据标签进行路由</title>
    <link href="https://yiminilife.com/posts/6d250c8e/"/>
    <id>https://yiminilife.com/posts/6d250c8e/</id>
    <published>2019-10-23T02:18:54.000Z</published>
    <updated>2019-12-18T01:50:07.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>笔者所在部门为了响应公司的号召，需要建立灰度环境。那么既然有了灰度环境的概念，必然需要实现灰度发布。</p><p>而目前的网关zuul并不能实现我们的需求，需要对路由策略进行扩展。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>网关根据指定的标签，转发请求到包含指定标签的服务节点上。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>方案设计图如下：</p><p><img src="/posts/6d250c8e/1571798323362.png" alt="1571798323362"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="给服务打标签"><a href="#给服务打标签" class="headerlink" title="给服务打标签"></a>给服务打标签</h4><p>修改项目的配置文件，每台服务器都要配置。笔者所在公司使用consul做注册中心，故配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr"> cloud:</span></span><br><span class="line"><span class="attr">  consul:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">xx.xx.xx.xx</span></span><br><span class="line"><span class="attr">     discovery:</span></span><br><span class="line"><span class="attr">      tags:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure><p>启动成功后观察consul，出现相应标签，表示服务注册成功。</p><p><img src="/posts/6d250c8e/1571798927307.png" alt="1571798927307"></p><h4 id="扩展路由策略"><a href="#扩展路由策略" class="headerlink" title="扩展路由策略"></a>扩展路由策略</h4><h5 id="负载均衡原理简析"><a href="#负载均衡原理简析" class="headerlink" title="负载均衡原理简析"></a>负载均衡原理简析</h5><p>首先，我们查看zuul源码，发现其使用的是netfix提供的ribbon-loadbalancer来实现负载均衡。程序中使用的版本为2.2.5。阅读源码发现ribbon主要通过ILoadBalancer接口定义了一系列行为：</p><p><img src="/posts/6d250c8e/image2019-10-10_14-30-33.png" alt></p><p>观察ILoadBalancer最基础的实现类com.netflix.loadbalancer.BaseLoadBalancer可以了解主要行为。LB的主要实现都在里面，DynamicServerListLoadBalancer和ZoneAwareLoadBalancer不过是扩展了他的功能而已。</p><p>可以看到一个LB中包含的几个重要的属性（工具），正是这几个工具为LB的功能提供支持。 他们是：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Iping</td><td>判断目标服务是否存活 对应不同的协议不同的方式去探测，得到后端服务是否存活。如有http的，还有对于微服务框架内的服务存活的NIWSDiscoveryPing是通过eureka client来获取的instanceinfo中的信息来获取。</td></tr><tr><td>IRule</td><td>负载均衡策略,可以插件化的为LB提供各种适用的负载均衡算法</td></tr><tr><td>LoadBalancerStats</td><td>LB运行信息 记录LB的实时运行信息，这些运行信息可以被用来作为LB策略的输入。</td></tr></tbody></table><p>观察下几个主要方法。首先是最重要的的服务选择方法：</p><p><img src="/posts/6d250c8e/image2019-10-10_14-38-4.png" alt></p><p>可以看到将该功能委托给包含的负载均衡策略rule来实现。ok，下面我们来看一下Ribbon负载均衡策略定义：</p><p>IRule其实就只做了一件事情Server choose(Object key)，可以看到这个功能是在LB中定义（要求）的，LB把这个功能委托给IRule来实现。不同的IRule可以向LB提供不同的负载均衡算法。</p><p><img src="/posts/6d250c8e/image2019-10-10_14-39-57.png" alt></p><p>com.netflix.loadbalancer包下面的提供了常用的几种策略。有RoundRobinRule、RandomRule这样的不依赖于Server运行状况的策略，也有AvailabilityFilteringRule、WeightedResponseTimeRule等多种基于收集到的Server运行状况决策的策略。判断运行状况时有，判断单个server的，也有判断整个zone的，适用于各种不同场景需求。</p><p>实现上有些策略可以继承一个既存的简单策略用于某些启动时候，也可以包含一个简单策略。甚至有ZoneAvoidanceRule这样的可以包含复合谓词的条件判断。</p><p>详见ZoneAvoidanceRule源码：</p><p><img src="/posts/6d250c8e/image2019-10-10_14-41-59.png" alt></p><p>其中组合了ZoneAvoidancePredicate和AvailabilityPredicate俩个谓词。前一个，以一个区域为单位考察可用性，对于不可用的区域整个丢弃，从剩下区域中选可用的server。判断出最差的区域，排除掉最差区域。在剩下的区域中，将按照服务器实例数的概率抽样法选择，从而判断判定一个zone的运行性能是否可用，剔除不可用的zone（的所有server），AvailabilityPredicate用于过滤掉连接数过多的Server。</p><p>我们看到ZoneAvoidanceRule中并没有重写choose方法，查看一下继承图：</p><p><img src="/posts/6d250c8e/image2019-10-10_14-57-34.png" alt></p><p>在PredicateBasedRule中我们发现：</p><p><img src="/posts/6d250c8e/image2019-10-10_14-58-19.png" alt></p><p>此处choose方法从lb中获取所有服务节点，然后针对具体实现类中的谓词（XXXPredicate）对服务节点进行过滤。继续跟踪最后发现执行至AbstractServerPredicate类中的代码：</p><p><img src="/posts/6d250c8e/image2019-10-10_15-13-44.png" alt></p><p>此处对server列表进行了过滤，过滤谓词是后面的this.getServerOnlyPredicate该方法只是简单返回了serverOnlyPredicate：</p><p><img src="/posts/6d250c8e/image2019-10-10_15-15-40.png" alt></p><p>此处可以发现，最终执行的谓词是具体子类定义的谓词，也就是ZoneAvoidanceRule的compositePredicate。</p><p>由此可见，我们只要按照ribbon的框架结构，提供自定义的负载均衡策略，实现具体的组合谓词，就可以实现根据标签来过滤服务节点。</p><h5 id="实现自定义的负载均衡策略（ServiceTagsAwareRule）"><a href="#实现自定义的负载均衡策略（ServiceTagsAwareRule）" class="headerlink" title="实现自定义的负载均衡策略（ServiceTagsAwareRule）"></a>实现自定义的负载均衡策略（ServiceTagsAwareRule）</h5><p>要实现自定义的负载均衡策略ServiceTagsAwareRule，我们先要实现它的谓词，首先建立一个抽象谓词类（BaseDiscoveryEnabledPredicate）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A template method predicate to be applied to service discovered server instances. The concrete implementation of</span></span><br><span class="line"><span class="comment"> * this class need to implement the &#123;<span class="doctag">@link</span> #apply(ConsulServer)&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDiscoveryEnabledPredicate</span> <span class="keyword">extends</span> <span class="title">AbstractServerPredicate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此处做一下前置判断，不为空且是ConsulServer的实例，spring-cloud框架会自动将候选的服务节点从Server向下转型为ConsulServer</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(PredicateKey input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.nonNull(input)</span><br><span class="line">                &amp;&amp; input.getServer() <span class="keyword">instanceof</span> ConsulServer</span><br><span class="line">                &amp;&amp; apply((ConsulServer) input.getServer());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether the specific &#123;<span class="doctag">@link</span> ConsulServer&#125; matches this predicate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server the discovered server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> whether the server matches the predicate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(ConsulServer server)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再实现具体的谓词逻辑（ServiceTagsAwarePredicate）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A default implementation of &#123;<span class="doctag">@link</span> ConsulServer&#125; that matches the instance against the attributes</span></span><br><span class="line"><span class="comment"> * registered through</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTagsAwarePredicate</span> <span class="keyword">extends</span> <span class="title">BaseDiscoveryEnabledPredicate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(ConsulServer server)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> RibbonFilterContext context = RibbonFilterContextHolder.getCurrentContext();</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; contextTags = context.getServiceTags(); <span class="comment">//自定义的prefilter中指定的生产环境或灰度环境标签</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; serviceTags = server.getHealthService().getService().getTags(); <span class="comment">//候选服务节点的标签</span></span><br><span class="line">        <span class="keyword">boolean</span> hit = CollectionUtils.isSubCollection(contextTags, serviceTags); <span class="comment">//候选服务节点的标签列表中是否包含指定的环境标签</span></span><br><span class="line">        logger.info(<span class="string">"ServiceTagsAwarePredicate contextTags:&#123;&#125;, serviceTags:&#123;&#125;,result: &#123;&#125;,server:&#123;&#125;"</span>,</span><br><span class="line">                contextTags, serviceTags, hit, JsonTools.defaultMapper().toJson(server));</span><br><span class="line">        <span class="keyword">return</span> hit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来实现负载均衡策略（ServiceTagsAwareRule）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTagsAwareRule</span> <span class="keyword">extends</span> <span class="title">PredicateBasedRule</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> CompositePredicate predicate;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates new instance of &#123;<span class="doctag">@link</span> ServiceTagsAwareRule&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceTagsAwareRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        predicate = createCompositePredicate(<span class="keyword">new</span> ServiceTagsAwarePredicate(), <span class="keyword">new</span> AvailabilityPredicate(<span class="keyword">this</span>, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractServerPredicate <span class="title">getPredicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> predicate;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates the composite predicate with fallback strategies.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> discoveryEnabledPredicate the discovery service predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> availabilityPredicate     the availability predicate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the composite predicate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompositePredicate <span class="title">createCompositePredicate</span><span class="params">(BaseDiscoveryEnabledPredicate discoveryEnabledPredicate, AvailabilityPredicate availabilityPredicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CompositePredicate</span><br><span class="line">                .withPredicates(discoveryEnabledPredicate, availabilityPredicate)</span><br><span class="line">                .addFallbackPredicate(availabilityPredicate)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义的策略配置交给spring管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Ribbon discovery filter auto configuration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(RibbonClientConfiguration.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"ribbon.filter.tags.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonDiscoveryRuleAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceTagsAwareRule <span class="title">serviceTagsAwareRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceTagsAwareRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义RibbonFilterContext:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ribbon discovery filter context,stores the tags based on which the server matching will be performed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RibbonFilterContext</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给上下文增加标签</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag 标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上下文实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RibbonFilterContext <span class="title">add</span><span class="params">(String tag)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标签</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag 标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上下文实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RibbonFilterContext <span class="title">remove</span><span class="params">(String tag)</span></span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有服务标签</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 服务标签list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getServiceTags</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RibbonFilterContextHolder:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Ribbon filter context holder.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonFilterContextHolder</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stores the &#123;<span class="doctag">@link</span> RibbonFilterContext&#125; for current thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RibbonFilterContext&gt; CONTEXT_HOLDER = <span class="keyword">new</span> InheritableThreadLocal&lt;RibbonFilterContext&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> RibbonFilterContext <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultRibbonFilterContext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves the current thread bound instance of &#123;<span class="doctag">@link</span> RibbonFilterContext&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RibbonFilterContext <span class="title">getCurrentContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears the current context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearCurrentContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultRibbonFilterContext:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ribbon discovery filter context, stores the attributes based on which the server matching will be performed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRibbonFilterContext</span> <span class="keyword">implements</span> <span class="title">RibbonFilterContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Filter attributes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; serviceTags = Lists.newArrayList();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonFilterContext <span class="title">add</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        serviceTags.add(tag);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonFilterContext <span class="title">remove</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        serviceTags.remove(tag);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getServiceTags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serviceTags;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在配置文件中加入以下配置：</p><p><img src="/posts/6d250c8e/image2019-10-11_10-30-31.png" alt></p><p>指定ribbon加载我们自定义的策略，此处参考了<a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html" rel="external nofollow noopener noreferrer" target="_blank">spring-cloud官方文档</a>：</p><h4 id="gateway根据标签路由"><a href="#gateway根据标签路由" class="headerlink" title="gateway根据标签路由"></a>gateway根据标签路由</h4><p>在wms-gateway的AuthUrlRsp类中新增access2Grey字段</p><p>在wms-gateway的RoleFilter中做如下修改：</p><p><img src="/posts/6d250c8e/image2019-10-10_16-19-49.png" alt></p><p>其中RibbonFilterConstants：</p><p><img src="/posts/6d250c8e/image2019-10-10_16-20-20.png" alt></p><h2 id="遇到的问题以及解决方案"><a href="#遇到的问题以及解决方案" class="headerlink" title="遇到的问题以及解决方案"></a>遇到的问题以及解决方案</h2><h3 id="请求没有路由到指定标签的服务"><a href="#请求没有路由到指定标签的服务" class="headerlink" title="请求没有路由到指定标签的服务"></a>请求没有路由到指定标签的服务</h3><p>开发环境自测的时候发现一个问题，请求没有按照指定的标签路由，排查发现自定义的RibbonFilterContext中存储的标签列表中存在重复的标签，日志如下：</p><p><img src="/posts/6d250c8e/image2019-10-10_16-35-44.png" alt></p><p>由此可见，contextTags中出现了俩个grey标签，导致谓词判断执行结果为false。而理论上contextTags中应该不会出现重复的标签。最终排查发现，虽然我们自定义了一套threadlocal变量，但是框架底层使用的线程池会对线程进行复用：</p><p><img src="/posts/6d250c8e/image2019-10-10_16-53-55.png" alt></p><p>解决方案：</p><ol><li>复用zuul维护的RequestContext</li></ol><p>在每个请求执行完成时候，将相应的threadlocal变量remove。但是应该在什么时间点remove呢？没有思路，直接查询下zuul的生命周期，ZuulServlet:</p><p><img src="/posts/6d250c8e/image2019-10-10_16-56-31.png" alt><br>  我们发现，zuul自身也维护了一套上下文环境变量，并且在请求结束时清空了。因此，我们可以直接复用zuul维护的RequestContext即可。</p><ol start="2"><li><p>在每个请求结束时清空自定义上下文</p><p><img src="/posts/6d250c8e/image2019-10-11_12-22-31.png" alt></p></li></ol><p>由图可知，无论<em>routing filters<em>成功与否，</em>post filters<em>都会被执行，其实通过刚刚的源码我们也可以验证这个执行流程。所以新增一个</em>post filter</em>,在其中执行清空自定义上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/10/11</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.POST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//清除自定义的上下文</span></span><br><span class="line">        logger.info(<span class="string">"开始清除自定义的上下文，&#123;&#125;"</span>, RibbonFilterContextHolder.getCurrentContext());</span><br><span class="line">        RibbonFilterContextHolder.clearCurrentContext();</span><br><span class="line">        logger.info(<span class="string">"清除自定义的上下文成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发环境没有在配置文件指定ribbon执行自定义的ServiceTagsAwareRule，为何程序还能正常执行？"><a href="#开发环境没有在配置文件指定ribbon执行自定义的ServiceTagsAwareRule，为何程序还能正常执行？" class="headerlink" title="开发环境没有在配置文件指定ribbon执行自定义的ServiceTagsAwareRule，为何程序还能正常执行？"></a>开发环境没有在配置文件指定ribbon执行自定义的ServiceTagsAwareRule，为何程序还能正常执行？</h3><p>项目在本地运行时，我们在本地的default配置文件中加入了以下代码：</p><p><img src="/posts/6d250c8e/image2019-10-11_10-30-31.png" alt></p><p>然而在发布开发环境的时候，由于我个人的疏忽，没有将开发环境的配置文件加上上述配置代码，可是令人惊讶的是程序运行正常，和预期结果一致。那么框架又是如何自动加载我们自定义的负载均衡策略的呢？</p><p>原因：</p><p>在经过本地调试后，我们仔细看下RibbonDiscoveryRuleAutoConfiguration和RibbonClientConfiguration这俩个文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Ribbon discovery filter auto configuration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanjing</span></span><br><span class="line"><span class="comment"> * date: 2019/9/30</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(RibbonClientConfiguration.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"ribbon.filter.tags.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonDiscoveryRuleAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceTagsAwareRule <span class="title">serviceTagsAwareRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceTagsAwareRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要注意一下@AutoConfigureBefore(RibbonClientConfiguration.class)这句注解，表示该配置会在RibbonClientConfiguration之前进行加载。然后我们再来看下RibbonClientConfiguration：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2013-2014 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">package</span> org.springframework.cloud.netflix.ribbon;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.params.ClientPNames;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.params.CookiePolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.commons.httpclient.HttpClientConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.ribbon.apache.HttpClientRibbonConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.ribbon.okhttp.OkHttpRibbonConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.netflix.client.DefaultLoadBalancerRetryHandler;</span><br><span class="line"><span class="keyword">import</span> com.netflix.client.RetryHandler;</span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.CommonClientConfigKey;</span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.DefaultClientConfigImpl;</span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ConfigurationBasedServerList;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.DummyPing;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ILoadBalancer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IPing;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.PollingServerListUpdater;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.Server;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ServerList;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ServerListFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ServerListUpdater;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ZoneAvoidanceRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ZoneAwareLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.niws.client.http.RestClient;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.api.client.Client;</span><br><span class="line"><span class="keyword">import</span> com.sun.jersey.client.apache4.ApacheHttpClient4;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.netflix.client.config.CommonClientConfigKey.DeploymentContextBasedVipAddresses;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.ribbon.RibbonUtils.setRibbonProperty;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.ribbon.RibbonUtils.updateToHttpsIfNeeded;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="comment">//Order is important here, last should be the default, first should be optional</span></span><br><span class="line"><span class="comment">// see https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;HttpClientConfiguration.class, OkHttpRibbonConfiguration.class, RestClientRibbonConfiguration.class, HttpClientRibbonConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonClientConfiguration</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONNECT_TIMEOUT = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_READ_TIMEOUT = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ribbon.client.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"client"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> maybe re-instate autowired load balancers: identified by name they could be</span></span><br><span class="line">    <span class="comment">// associated with ribbon clients</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PropertiesFactory propertiesFactory;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IClientConfig <span class="title">ribbonClientConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultClientConfigImpl config = <span class="keyword">new</span> DefaultClientConfigImpl();</span><br><span class="line">        config.loadProperties(<span class="keyword">this</span>.name);</span><br><span class="line">        config.set(CommonClientConfigKey.ConnectTimeout, DEFAULT_CONNECT_TIMEOUT);</span><br><span class="line">        config.set(CommonClientConfigKey.ReadTimeout, DEFAULT_READ_TIMEOUT);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//不会进行加载，因为我们之前已经在RibbonDiscoveryRuleAutoConfiguration中加载了IRule的子类，也就是我们自定义的ServiceTagsAwareRule</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(IRule.class, name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(IRule.class, config, name);</span><br><span class="line">        &#125;</span><br><span class="line">        ZoneAvoidanceRule rule = <span class="keyword">new</span> ZoneAvoidanceRule();</span><br><span class="line">        rule.initWithNiwsConfig(config);</span><br><span class="line">        <span class="keyword">return</span> rule;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(IPing.class, name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(IPing.class, config, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DummyPing();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerList&lt;Server&gt; <span class="title">ribbonServerList</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(ServerList.class, name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(ServerList.class, config, name);</span><br><span class="line">        &#125;</span><br><span class="line">        ConfigurationBasedServerList serverList = <span class="keyword">new</span> ConfigurationBasedServerList();</span><br><span class="line">        serverList.initWithNiwsConfig(config);</span><br><span class="line">        <span class="keyword">return</span> serverList;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerListUpdater <span class="title">ribbonServerListUpdater</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PollingServerListUpdater(config);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//此处加载ribbonLoadBalancer，其中的IRule框架会自行匹配到我们之前已经加载好的ServiceTagsAwareRule</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILoadBalancer <span class="title">ribbonLoadBalancer</span><span class="params">(IClientConfig config,</span></span></span><br><span class="line"><span class="function"><span class="params">            ServerList&lt;Server&gt; serverList, ServerListFilter&lt;Server&gt; serverListFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">            IRule rule, IPing ping, ServerListUpdater serverListUpdater)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(ILoadBalancer.class, name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(ILoadBalancer.class, config, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZoneAwareLoadBalancer&lt;&gt;(config, rule, ping, serverList,</span><br><span class="line">                serverListFilter, serverListUpdater);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerListFilter&lt;Server&gt; <span class="title">ribbonServerListFilter</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.propertiesFactory.isSet(ServerListFilter.class, name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.propertiesFactory.get(ServerListFilter.class, config, name);</span><br><span class="line">        &#125;</span><br><span class="line">        ZonePreferenceServerListFilter filter = <span class="keyword">new</span> ZonePreferenceServerListFilter();</span><br><span class="line">        filter.initWithNiwsConfig(config);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonLoadBalancerContext <span class="title">ribbonLoadBalancerContext</span><span class="params">(ILoadBalancer loadBalancer,</span></span></span><br><span class="line"><span class="function"><span class="params">            IClientConfig config, RetryHandler retryHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RibbonLoadBalancerContext(loadBalancer, config, retryHandler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryHandler <span class="title">retryHandler</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultLoadBalancerRetryHandler(config);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerIntrospector <span class="title">serverIntrospector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultServerIntrospector();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preprocess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setRibbonProperty(name, DeploymentContextBasedVipAddresses.key(), name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideRestClient</span> <span class="keyword">extends</span> <span class="title">RestClient</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> IClientConfig config;</span><br><span class="line">        <span class="keyword">private</span> ServerIntrospector serverIntrospector;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">OverrideRestClient</span><span class="params">(IClientConfig config,</span></span></span><br><span class="line"><span class="function"><span class="params">                ServerIntrospector serverIntrospector)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.config = config;</span><br><span class="line">            <span class="keyword">this</span>.serverIntrospector = serverIntrospector;</span><br><span class="line">            initWithNiwsConfig(<span class="keyword">this</span>.config);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> URI <span class="title">reconstructURIWithServer</span><span class="params">(Server server, URI original)</span> </span>&#123;</span><br><span class="line">            URI uri = updateToHttpsIfNeeded(original, <span class="keyword">this</span>.config,</span><br><span class="line">                    <span class="keyword">this</span>.serverIntrospector, server);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.reconstructURIWithServer(server, uri);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Client <span class="title">apacheHttpClientSpecificInitialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ApacheHttpClient4 apache = (ApacheHttpClient4) <span class="keyword">super</span>.apacheHttpClientSpecificInitialization();</span><br><span class="line">            apache.getClientHandler().getHttpClient().getParams().setParameter(</span><br><span class="line">                    ClientPNames.COOKIE_POLICY, CookiePolicy.IGNORE_COOKIES);</span><br><span class="line">            <span class="keyword">return</span> apache;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，谜题解开，由于我们优先加载了自定义的ServiceTagsAwareRule，所以RibbonClientConfiguration中默认的ribbonRule不会被加载，最后在加载ribbonLoadBalancer的时候，框架只能匹配到我们自定义的ServiceTagsAwareRule。</p><p>最后，我们可以开心的将指向自定义策略的配置省略了！</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="http://juke.outofmemory.cn/entry/253610" rel="external nofollow noopener noreferrer" target="_blank">http://juke.outofmemory.cn/entry/253610</a></p><p><a href="http://juke.outofmemory.cn/entry/253843" rel="external nofollow noopener noreferrer" target="_blank">http://juke.outofmemory.cn/entry/253843</a></p><p><a href="http://ju.outofmemory.cn/entry/253845" rel="external nofollow noopener noreferrer" target="_blank">http://ju.outofmemory.cn/entry/253845</a></p><p><a href="https://github.com/jmnarloch/ribbon-discovery-filter-spring-cloud-starter" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jmnarloch/ribbon-discovery-filter-spring-cloud-starter</a></p><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html" rel="external nofollow noopener noreferrer" target="_blank">https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html</a></p><p><a href="https://github.com/Netflix/zuul/wiki/How-it-Works" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Netflix/zuul/wiki/How-it-Works</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;笔者所在部门为了响应公司的号召，需要建立灰度环境。那么既然有了灰度环境的概念，必然需要实现灰度发布。&lt;/p&gt;
&lt;p&gt;而目前的网关zuul并不
      
    
    </summary>
    
      <category term="java" scheme="https://yiminilife.com/categories/java/"/>
    
    
      <category term="zuul" scheme="https://yiminilife.com/tags/zuul/"/>
    
      <category term="网关" scheme="https://yiminilife.com/tags/%E7%BD%91%E5%85%B3/"/>
    
      <category term="Netflix" scheme="https://yiminilife.com/tags/Netflix/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客备份</title>
    <link href="https://yiminilife.com/posts/2dd71a2b/"/>
    <id>https://yiminilife.com/posts/2dd71a2b/</id>
    <published>2019-07-18T11:02:57.000Z</published>
    <updated>2019-12-18T01:50:07.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、将本地hexo博客的仓库初始化为git项目"><a href="#一、将本地hexo博客的仓库初始化为git项目" class="headerlink" title="一、将本地hexo博客的仓库初始化为git项目"></a>一、将本地hexo博客的仓库初始化为git项目</h3><p>注意：检查一下theme文件夹下的主题。例如如果themes/next，此目录下若有.git文件夹，请删除这个.git文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//默认已经在项目根路径下</span><br><span class="line">git init  //初始化本地仓库</span><br></pre></td></tr></table></figure><h3 id="二、配置-gitignore文件"><a href="#二、配置-gitignore文件" class="headerlink" title="二、配置.gitignore文件"></a>二、配置.gitignore文件</h3><p>新建.gitignore（有则忽略），在文件中输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><h3 id="三、将本地仓库和xxx-github-io仓库的url配对，推送本地仓库文件至远端的hexo分支"><a href="#三、将本地仓库和xxx-github-io仓库的url配对，推送本地仓库文件至远端的hexo分支" class="headerlink" title="三、将本地仓库和xxx.github.io仓库的url配对，推送本地仓库文件至远端的hexo分支"></a>三、将本地仓库和xxx.github.io仓库的url配对，推送本地仓库文件至远端的hexo分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"blog hexo"</span></span><br><span class="line">git branch hexo  //新建hexo分支</span><br><span class="line">git checkout hexo  //切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:xxx/xxx.github.io.git  //xxx为github用户名</span><br><span class="line">git push origin hexo  //push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure><h3 id="四、在其他终端获取hexo仓库。"><a href="#四、在其他终端获取hexo仓库。" class="headerlink" title="四、在其他终端获取hexo仓库。"></a>四、在其他终端获取hexo仓库。</h3><h4 id="1-从github上拉取hexo分支的代码"><a href="#1-从github上拉取hexo分支的代码" class="headerlink" title="1.从github上拉取hexo分支的代码"></a>1.从github上拉取hexo分支的代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:user/user.github.io.git  //将Github中hexo分支<span class="built_in">clone</span>到本地</span><br><span class="line"><span class="built_in">cd</span> user.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="2-写文章并进行备份和部署"><a href="#2-写文章并进行备份和部署" class="headerlink" title="2.写文章并进行备份和部署"></a>2.写文章并进行备份和部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//进入user.github.io文件夹,应是hexo分支</span><br><span class="line">git pull origin hexo //本地和远端的融合</span><br><span class="line">hexo new post <span class="string">"new post name"</span>  //写新文章</span><br><span class="line">git add <span class="built_in">source</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span></span><br><span class="line">git push origin hexo  //备份</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、将本地hexo博客的仓库初始化为git项目&quot;&gt;&lt;a href=&quot;#一、将本地hexo博客的仓库初始化为git项目&quot; class=&quot;headerlink&quot; title=&quot;一、将本地hexo博客的仓库初始化为git项目&quot;&gt;&lt;/a&gt;一、将本地hexo博客的仓库初始化
      
    
    </summary>
    
      <category term="blog" scheme="https://yiminilife.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://yiminilife.com/tags/hexo/"/>
    
      <category term="备份" scheme="https://yiminilife.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>基于GitHub Pages搭建Hexo博客</title>
    <link href="https://yiminilife.com/posts/ff98e00c/"/>
    <id>https://yiminilife.com/posts/ff98e00c/</id>
    <published>2019-07-17T06:07:18.000Z</published>
    <updated>2019-12-18T01:50:07.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" rel="external nofollow noopener noreferrer" target="_blank">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Git版本控制软件"><a href="#安装Git版本控制软件" class="headerlink" title="安装Git版本控制软件"></a>安装Git版本控制软件</h3><p>访问git<a href="http://git-scm.com/downloads" rel="external nofollow noopener noreferrer" target="_blank">官方下载页面</a>下载对应终端的git安装包，笔者使用的是macbook,所以下载Mac OS X 版本。下载页面如下图所示，点击下载对应终端的git安装包即可。</p><p><img src="/posts/ff98e00c/image-20190717141834488.png" alt="image-20190717141834488.png"></p><p>安装完毕在命令终端输入git，出现如下提示表示git安装成功。window用户可以使用git bash。</p><p><img src="/posts/ff98e00c/Snip20190717_22.png" alt="Snip20190717_22"></p><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>访问<a href="https://nodejs.org" rel="external nofollow noopener noreferrer" target="_blank">nodejs官网</a>下载lts版本的安装包，笔者访问时的版本为10.16.0，直接点击下载安装即可。</p><p><img src="/posts/ff98e00c/Snip20190717_12.png" alt="Snip20190717_12.png"></p><p>安装完毕，在命令行输入<code>node -v</code>和<code>npm -v</code>出现版本信息，表示node安装成功。</p><p><img src="/posts/ff98e00c/Snip20190717_23.png" alt="Snip20190717_23"></p><h3 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h3><h4 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h4><p>访问<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">github</a>。如果没有账号，请先注册。注册完毕，进入个人中心页面，点击左侧边栏的<code>new</code>按钮，进入创建仓库界面。输入仓库名称，<strong>yourname.github.io</strong>。点击<code>Create repository</code>完成仓库创建。</p><p>注意：</p><ol><li><strong>yourname</strong>要和你的github用户名一致，笔者这里<strong>yourname</strong>为<strong>Jing0017</strong>。</li><li>仓库后缀必需为<strong>.github.io</strong>结尾。</li></ol><p>请务必遵循这俩个条件，否则后续访问会出现404错误。</p><p><img src="/posts/ff98e00c/Snip20190717_14.png" alt="Snip20190717_14.png"></p><h4 id="设置repository的Github-Pages"><a href="#设置repository的Github-Pages" class="headerlink" title="设置repository的Github Pages"></a>设置repository的Github Pages</h4><p>完成创建后，点击<code>Settings</code>，滚动下拉至Github Pages配置模块，配置<code>Source</code>，下拉框选择master分支。如果master branch为灰色，请先按照<code>Code</code>Tab页的教程生成README.md文件，然后在回来设置Github Pages。</p><p><img src="/posts/ff98e00c/Snip20190717_20.png" alt="Snip20190717_20.png"></p><h4 id="生成ssh秘钥"><a href="#生成ssh秘钥" class="headerlink" title="生成ssh秘钥"></a>生成ssh秘钥</h4><p>为方便后续访问，选择ssh方式克隆仓库，免去每次提交时的用户和密码验证。</p><p>在终端（Terminal）输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"Github的注册邮箱地址"</span></span><br></pre></td></tr></table></figure><p>遇到提示请按<code>Enter</code>，等待秘钥生成完毕，会得到两个文件<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>，用文本编辑器打开<strong>id_rsa.pub</strong>复制里面内容。访问<a href="https://github.com/settings/ssh" rel="external nofollow noopener noreferrer" target="_blank">这里</a>，点击 <code>New SSH key</code>，将复制的内容粘贴至文本框中。最后点击<code>Add SSH key</code>。</p><p><img src="/posts/ff98e00c/Snip20190717_21.png" alt="Snip20190717_21.png"></p><h2 id="安装配置hexo"><a href="#安装配置hexo" class="headerlink" title="安装配置hexo"></a>安装配置hexo</h2><p>做完上述准备工作，终于迎来了我们的主角hexo。</p><p>具体安装步骤，可以参考<a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。不想移步的请继续往下看。</p><h3 id="下载安装hexo"><a href="#下载安装hexo" class="headerlink" title="下载安装hexo"></a>下载安装hexo</h3><h4 id="选定博客在本地存放的路径"><a href="#选定博客在本地存放的路径" class="headerlink" title="选定博客在本地存放的路径"></a>选定博客在本地存放的路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;your path&gt;</span><br></pre></td></tr></table></figure><p><strong>强调</strong>：强烈建议<strong>不要</strong> 选择需要管理员权限才能创建文件（夹）的文件夹。</p><h4 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等待安装完毕，在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo</span><br></pre></td></tr></table></figure><p>若出现下图，说明hexo安装成功：</p><p><img src="/posts/ff98e00c/Snip20190717_24.png" alt="Snip20190717_24"></p><h4 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;  // 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install // 根据package.json的dependencies配置安装所有的依赖包</span><br></pre></td></tr></table></figure><h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h4><p>初始化博客之后，我们可以看到项目的基本目录结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><code>_config.yml</code>里修改博客的基础配置。可以参考<a href="https://hexo.io/zh-cn/docs/configuration" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。下面我们具体看一下<code>_config.yml</code>文件全貌。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment"># The title of your website</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment"># The subtitle of your website</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment"># The description of your website</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># Your name</span></span><br><span class="line"><span class="attr">language:</span> <span class="comment"># The language of your website</span></span><br><span class="line"><span class="attr">timezone:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://yoursite.com/child</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span></span><br></pre></td></tr></table></figure><h5 id="完善网站信息-Site"><a href="#完善网站信息-Site" class="headerlink" title="完善网站信息(Site)"></a>完善网站信息(Site)</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">禅心小筑</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">随遇而安</span>   </span><br><span class="line"><span class="attr">description:</span> <span class="string">菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">技术</span> <span class="string">生活</span> <span class="string">修行</span> <span class="string">求道。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">随风</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p>language和timezone的配置，详细可参考<a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" rel="external nofollow noopener noreferrer" target="_blank">语言规范</a>和<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" rel="external nofollow noopener noreferrer" target="_blank">时区规范</a>。</p><p>注意：language字段配置的zh-CN 必需和相关主题文件夹下 <code>/themes/next/languages</code>里面的国际化文件相匹配，否则配置将不生效，显示默认英文配置。</p><p><img src="/posts/ff98e00c/Snip20190717_25.png" alt="Snip20190717_25"></p><h5 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h5><p>hexo的默认主题是 <code>landscape</code>，参看<a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">这里</a>可以选择自己心仪的主题，笔者这里选择的是<a href="https://theme-next.org/" rel="external nofollow noopener noreferrer" target="_blank">next</a>，安装教程可参看<a href="https://github.com/theme-next/hexo-theme-next" rel="external nofollow noopener noreferrer" target="_blank">这里</a>。简要步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt; </span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后在_config.yml中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h5 id="配置部署（Deploy）"><a href="#配置部署（Deploy）" class="headerlink" title="配置部署（Deploy）"></a>配置部署（Deploy）</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:Jing0017/Jing0017.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>此处repo配置为准备工作中我们创建的仓库。选择使用ssh方式克隆。branch选择master分支，和github page的设置相对应。</p><p><img src="/posts/ff98e00c/Snip20190717_26.png" alt="Snip20190717_26"></p><p>至此我们完成了hexo的安装与配置。</p><h2 id="发表第一篇文章"><a href="#发表第一篇文章" class="headerlink" title="发表第一篇文章"></a>发表第一篇文章</h2><h3 id="建立分类"><a href="#建立分类" class="headerlink" title="建立分类"></a>建立分类</h3><p>命令终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>在/source/categories目录下找到<code>index.md</code>文件打开写入如下内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2019-07-15 11:49:33</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="建立标签"><a href="#建立标签" class="headerlink" title="建立标签"></a>建立标签</h3><p>同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>在/source/tags目录下找到<code>index.md</code>文件打开写入如下内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-07-15 11:49:20</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><h4 id="新建文章并完成写作"><a href="#新建文章并完成写作" class="headerlink" title="新建文章并完成写作"></a>新建文章并完成写作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"静夜思"</span></span><br></pre></td></tr></table></figure><p>在/source/_post目录下找到 <code>静夜思.md</code>文件打开写入如下内容：</p><p><img src="/posts/ff98e00c/Snip20190717_27.png" alt="Snip20190717_27"></p><p>详细解释如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 静夜思 //文章的标题</span><br><span class="line">date: 2019-07-17 16:54:51</span><br><span class="line">categories: 唐诗 //注意:之后有空格，将文章划分到唐诗的分类中</span><br><span class="line">tags: 李白 //给文章打上李白的标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">床前明月光，疑是地上霜。</span><br><span class="line">举头望明月，低头思故乡。</span><br></pre></td></tr></table></figure><h4 id="本地访问博客"><a href="#本地访问博客" class="headerlink" title="本地访问博客"></a>本地访问博客</h4><h5 id="markdown生成html"><a href="#markdown生成html" class="headerlink" title="markdown生成html"></a>markdown生成html</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate //简写 hexo g</span><br></pre></td></tr></table></figure><p>此时发现文件目录多了public文件夹，此文件夹下是根据/source/_post/目录下的所有markdown文件生成的html，css，js等静态文件。</p><h5 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server // 简写 hexo s</span><br></pre></td></tr></table></figure><p><img src="/posts/ff98e00c/Snip20190717_28.png" alt="Snip20190717_28"></p><p>根据提示访问<a href="http://localhost:4000。" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000。</a></p><p>发现主页新增了一篇静夜思的文章，切分类为唐诗，标签为李白。</p><p><img src="/posts/ff98e00c/Snip20190717_33.png" alt="Snip20190717_33.png"></p><p><img src="/posts/ff98e00c/Snip20190717_35.png" alt="Snip20190717_35.png"></p><p>笔者这里已经对主题进行了优化，所以和next的默认样式出入较大。</p><h4 id="通过Github-Page-访问博客"><a href="#通过Github-Page-访问博客" class="headerlink" title="通过Github Page 访问博客"></a>通过Github Page 访问博客</h4><p>执行hexo 部署命令，将生成的静态文件推送至我们的github仓库(yourname.github.io)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy //简写 hexo d</span><br></pre></td></tr></table></figure><p>然后直接访问<a href="https://yourname.github.io即可。" rel="external nofollow noopener noreferrer" target="_blank">https://yourname.github.io即可。</a></p><h4 id="通过域名访问hexo博客"><a href="#通过域名访问hexo博客" class="headerlink" title="通过域名访问hexo博客"></a>通过域名访问hexo博客</h4><h6 id="购置域名"><a href="#购置域名" class="headerlink" title="购置域名"></a>购置域名</h6><p>从各大域名提供商购置个人域名，笔者之前在阿里万网购置过域名，此处省略域名购置流程。可以自行百度。</p><h6 id="Github-Pages-配置域名"><a href="#Github-Pages-配置域名" class="headerlink" title="Github Pages 配置域名"></a>Github Pages 配置域名</h6><p><img src="/posts/ff98e00c/Snip20190717_36.png" alt="Snip20190717_36"></p><p>在仓库的<code>Settings</code>tab页中找到GitHub Pages 将<code>Custom domain</code> 设置为自己的域名。此时可以看到<code>Code</code>tab</p><p>页中会生成一个CNAME文件，保存着我们的域名信息。</p><h6 id="域名配置DNS解析"><a href="#域名配置DNS解析" class="headerlink" title="域名配置DNS解析"></a>域名配置DNS解析</h6><p>新增俩条域名解析</p><p><img src="/posts/ff98e00c/Snip20190717_37.png" alt="Snip20190717_37"></p><p><img src="/posts/ff98e00c/Snip20190717_38.png" alt="Snip20190717_38"></p><p>记录类型为<strong>CNAME</strong>，主机记录分别为<strong>@</strong>和<strong>www</strong>,记录值填<strong>yourname.github.io</strong>。等待域名解析生效。</p><p>域名解析生效后，直接访问<strong>http://你的域名</strong>即可访问hexo博客。效果如下：</p><p><img src="/posts/ff98e00c/Snip20190717_43.png" alt="Snip20190717_43"></p><p><strong>注意：</strong>  CNAME文件在下次 hexo deploy的时候就消失了，需要重新创建，这样就很繁琐。</p><p>网上推荐的解决方法我比较推荐新增hexo-generator-cname插件实现永久保留。</p><p>具体操作如下：</p><p>在博客根目录下（source 同级目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-cname --save //下载hexo-generator-cname库并将依赖写入package.json</span><br></pre></td></tr></table></figure><p>在_config.yml 找到Plugins的注释，在其下方增加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br></pre></td></tr></table></figure><p>:smile:感谢你看到了最后，至此我们完成了hexo博客的搭建。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/proje
      
    
    </summary>
    
      <category term="blog" scheme="https://yiminilife.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://yiminilife.com/tags/hexo/"/>
    
      <category term="git" scheme="https://yiminilife.com/tags/git/"/>
    
      <category term="node" scheme="https://yiminilife.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Markdown For Typora</title>
    <link href="https://yiminilife.com/posts/b4b05a82/"/>
    <id>https://yiminilife.com/posts/b4b05a82/</id>
    <published>2019-07-16T12:22:35.000Z</published>
    <updated>2019-12-18T01:50:07.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href="http://daringfireball.net/" rel="external nofollow noopener noreferrer" target="_blank">Daring Fireball</a>; the original guideline is <a href="http://daringfireball.net/projects/markdown/syntax" rel="external nofollow noopener noreferrer" target="_blank">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using <a href="https://help.github.com/articles/github-flavored-markdown/" rel="external nofollow noopener noreferrer" target="_blank">GitHub Flavored Markdown</a>.</p><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraph-and-line-breaks"><a href="#Paragraph-and-line-breaks" class="headerlink" title="Paragraph and line breaks"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p><p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>Headers use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to header levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># This is an H1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## This is an H2</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### This is an H6</span></span><br></pre></td></tr></table></figure><p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a header.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. This is first paragraph.</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</span></span><br></pre></td></tr></table></figure><p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p><p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## un-ordered list</span></span><br><span class="line"><span class="bullet">*   </span>Red</span><br><span class="line"><span class="bullet">*   </span>Green</span><br><span class="line"><span class="bullet">*   </span>Blue</span><br><span class="line"></span><br><span class="line"><span class="section">## ordered list</span></span><br><span class="line"><span class="bullet">1.  </span>Red</span><br><span class="line"><span class="bullet">2. </span>Green</span><br><span class="line"><span class="bullet">3.</span>Blue</span><br></pre></td></tr></table></figure><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] a task list item</span><br><span class="line"><span class="bullet">- </span>[ ] list syntax required</span><br><span class="line"><span class="bullet">- </span>[ ] normal <span class="strong">**formatting**</span>, @mentions, #1234 refs</span><br><span class="line"><span class="bullet">- </span>[ ] incomplete</span><br><span class="line"><span class="bullet">- </span>[x] completed</span><br></pre></td></tr></table></figure><p>You can change the complete/incomplete state by clicking on the checkbox before the item.</p><h3 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p><p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Here's an example:</span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">function test() &#123;</span></span><br><span class="line"><span class="code">  console.log("notice the blank line before this function?");</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">syntax highlighting:</span><br><span class="line"><span class="code">```ruby</span></span><br><span class="line"><span class="code">require 'redcarpet'</span></span><br><span class="line"><span class="code">markdown = Redcarpet.new("Hello World!")</span></span><br><span class="line"><span class="code">puts markdown.to_html</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><h3 id="Math-Blocks"><a href="#Math-Blocks" class="headerlink" title="Math Blocks"></a>Math Blocks</h3><p>You can render <em>LaTeX</em> mathematical expressions using <strong>MathJax</strong>.</p><p>To add a mathematical expression, input <code>$$</code> and press the ‘Return’ key. This will trigger an input field which accepts <em>Tex/LaTex</em> source. For example:<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$<br>In the markdown source file, the math block is a <em>LaTeX</em> expression wrapped by a pair of ‘$$’ marks:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;<span class="emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125;</span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>You can find more details <a href="http://support.typora.io/Math/" rel="external nofollow noopener noreferrer" target="_blank">here</a>.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p><p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.</p><p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p><p>In markdown source code, they look like:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| First Header  | Second Header |</span><br><span class="line">| ------------- | ------------- |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br></pre></td></tr></table></figure><p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p><p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Left-Aligned  | Center Aligned  | Right Aligned |</span><br><span class="line">| :------------ |:---------------:| -----:|</span><br><span class="line">| col 3 is      | some wordy text | $1600 |</span><br><span class="line">| col 2 is      | centered        |   $12 |</span><br><span class="line">| zebra stripes | are neat        |    $1 |</span><br></pre></td></tr></table></figure><p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p><h3 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You can create footnotes like this[^footnote].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^footnote</span>]: <span class="link">Here is the *text* of the **footnote**.</span></span><br></pre></td></tr></table></figure><p>will produce:</p><p>You can create footnotes like this[^footnote].</p><p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p><p>Hover over the ‘footnote’ superscript to see content of the footnote.</p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p><hr><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora now supports <a href="http://jekyllrb.com/docs/frontmatter/" rel="external nofollow noopener noreferrer" target="_blank">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p><h3 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">an example</span>](<span class="link">http://example.com/</span>) inline link.</span><br></pre></td></tr></table></figure><p>will produce:</p><p>This is <a href="http://example.com/" rel="external nofollow noopener noreferrer" target="_blank">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot;&gt;</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><p>Command(on Windows: Ctrl) + Click <a href="#block-elements">This link</a> will jump to header <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">an example</span>][<span class="symbol">id</span>] reference-style link.</span><br><span class="line"></span><br><span class="line">Then, anywhere in the document, you define your link label on a line by itself like this:</span><br><span class="line"></span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></span><br></pre></td></tr></table></figure><p>In Typora, they will be rendered like so:</p><p>This is <a href="http://example.com/" title="Optional Title Here" rel="external nofollow noopener noreferrer" target="_blank">an example</a> reference-style link.</p><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</span><br><span class="line">And then define the link:</span><br><span class="line"></span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/</span></span><br></pre></td></tr></table></figure><p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#x69;&#64;&#116;&#121;&#x70;&#x6f;&#x72;&#97;&#46;&#x69;&#111;" target="_blank" rel="noopener">&#x69;&#64;&#116;&#121;&#x70;&#x6f;&#x72;&#97;&#46;&#x69;&#111;</a>.</p><p>Typora will also automatically link standard URLs. e.g: <a href="http://www.google.com" rel="external nofollow noopener noreferrer" target="_blank">www.google.com</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)</span><br></pre></td></tr></table></figure><p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p><p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p><p>You can find more details <a href="https://support.typora.io/Images/" rel="external nofollow noopener noreferrer" target="_blank">here</a>.</p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*single asterisks*</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_single underscores_</span></span><br></pre></td></tr></table></figure><p>output:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p><blockquote><p>wow_great_stuff</p><p>do_this_and_do_that_and_another_thing.</p></blockquote><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="emphasis">*this text is surrounded by literal asterisks\*</span></span><br></pre></td></tr></table></figure><p>Typora recommends using the <code>*</code> symbol.</p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**double asterisks**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">__double underscores__</span></span><br></pre></td></tr></table></figure><p>output:</p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>Typora recommends using the <code>**</code> symbol.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use the <span class="code">`printf()`</span> function.</span><br></pre></td></tr></table></figure><p>will produce:</p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-😄"><a href="#Emoji-😄" class="headerlink" title="Emoji 😄"></a>Emoji 😄</h3><p>Input emoji with syntax <code>:smile:</code>.</p><p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\lim_{x \to \infty} \exp(-x) = 0$</code> will be rendered as LaTeX command.</p><p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p><p>You can find more details <a href="http://support.typora.io/Math/" rel="external nofollow noopener noreferrer" target="_blank">here</a>.</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code>/</p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src="xxx.mp4" /&gt;</span><br></pre></td></tr></table></figure><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><p>You can find more details <a href="http://support.typora.io/HTML/" rel="external nofollow noopener noreferrer" target="_blank">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt; is created by &lt;a hre
      
    
    </summary>
    
      <category term="doc" scheme="https://yiminilife.com/categories/doc/"/>
    
    
      <category term="typora" scheme="https://yiminilife.com/tags/typora/"/>
    
      <category term="markdown" scheme="https://yiminilife.com/tags/markdown/"/>
    
  </entry>
  
</feed>
ed>
